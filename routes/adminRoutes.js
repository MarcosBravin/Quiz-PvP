const express = require("express");
const router = express.Router();
const User = require("../models/User");
const { isAdmin } = require("../middlewares/authMiddleware");

// Painel de Administra√ß√£o
router.get("/dashboard", isAdmin, async (req, res) => {
    try {
        const users = await User.find();
        res.render("adminDashboard", { title: "Painel Admin", users, message: null });
    } catch (err) {
        console.error("Erro ao carregar painel admin:", err);
        res.status(500).send("Erro ao carregar painel admin.");
    }
});

// üö´ **Banir Usu√°rio**
router.post("/ban/:id", isAdmin, async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).send("Usu√°rio n√£o encontrado!");

        user.isBanned = true;
        await user.save();
        
        res.redirect("/admin/dashboard");
    } catch (err) {
        console.error("Erro ao banir usu√°rio:", err);
        res.status(500).send("Erro ao banir usu√°rio.");
    }
});

// üîì **Desbanir Usu√°rio**
router.post("/unban/:id", isAdmin, async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).send("Usu√°rio n√£o encontrado!");

        user.isBanned = false;
        await user.save();
        
        res.redirect("/admin/dashboard");
    } catch (err) {
        console.error("Erro ao desbanir usu√°rio:", err);
        res.status(500).send("Erro ao desbanir usu√°rio.");
    }
});

// üöÄ **Promover Usu√°rio (user ‚Üí moderator ‚Üí admin)**
router.post("/promote/:id", isAdmin, async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).send("Usu√°rio n√£o encontrado!");

        if (user.role === "user") {
            user.role = "moderator"; // Promove para Moderador
        } else if (user.role === "moderator") {
            user.role = "admin"; // Promove para Admin
        } else {
            return res.status(400).send("Este usu√°rio j√° √© um administrador!");
        }

        await user.save();
        res.redirect("/admin/dashboard");
    } catch (err) {
        console.error("Erro ao promover usu√°rio:", err);
        res.status(500).send("Erro ao promover usu√°rio.");
    }
});

// üîΩ **Rebaixar Usu√°rio (admin ‚Üí moderator ‚Üí user)**
router.post("/demote/:id", isAdmin, async (req, res) => {
    try {
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).send("Usu√°rio n√£o encontrado!");

        if (user.role === "admin") {
            user.role = "moderator"; // Rebaixa para Moderador
        } else if (user.role === "moderator") {
            user.role = "user"; // Rebaixa para Usu√°rio comum
        } else {
            return res.status(400).send("Este usu√°rio j√° est√° no n√≠vel mais baixo!");
        }

        await user.save();
        res.redirect("/admin/dashboard");
    } catch (err) {
        console.error("Erro ao rebaixar usu√°rio:", err);
        res.status(500).send("Erro ao rebaixar usu√°rio.");
    }
});

module.exports = router;
